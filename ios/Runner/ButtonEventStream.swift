// Autogenerated from Pigeon (v22.7.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct ButtonEvent {
  var buttonName: String? = nil
  var timestamp: Int64? = nil
  var buttonKey: Int64? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ButtonEvent? {
    let buttonName: String? = nilOrValue(pigeonVar_list[0])
    let timestamp: Int64? = nilOrValue(pigeonVar_list[1])
    let buttonKey: Int64? = nilOrValue(pigeonVar_list[2])

    return ButtonEvent(
      buttonName: buttonName,
      timestamp: timestamp,
      buttonKey: buttonKey
    )
  }
  func toList() -> [Any?] {
    return [
      buttonName,
      timestamp,
      buttonKey,
    ]
  }
}

private class ButtonEventStreamPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return ButtonEvent.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class ButtonEventStreamPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ButtonEvent {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ButtonEventStreamPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ButtonEventStreamPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ButtonEventStreamPigeonCodecWriter(data: data)
  }
}

class ButtonEventStreamPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = ButtonEventStreamPigeonCodec(readerWriter: ButtonEventStreamPigeonCodecReaderWriter())
}

var buttonEventStreamPigeonMethodCodec = FlutterStandardMethodCodec(readerWriter: ButtonEventStreamPigeonCodecReaderWriter());


private class PigeonStreamHandler<ReturnType>: NSObject, FlutterStreamHandler {
  private let wrapper: PigeonEventChannelWrapper<ReturnType>
  private var pigeonSink: PigeonEventSink<ReturnType>? = nil

  init(wrapper: PigeonEventChannelWrapper<ReturnType>) {
    self.wrapper = wrapper
  }

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink)
    -> FlutterError?
  {
    pigeonSink = PigeonEventSink<ReturnType>(events)
    wrapper.onListen(withArguments: arguments, sink: pigeonSink!)
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    pigeonSink = nil
    wrapper.onCancel(withArguments: arguments)
    return nil
  }
}

class PigeonEventChannelWrapper<ReturnType> {
  func onListen(withArguments arguments: Any?, sink: PigeonEventSink<ReturnType>) {}
  func onCancel(withArguments arguments: Any?) {}
}

class PigeonEventSink<ReturnType> {
  private let sink: FlutterEventSink

  init(_ sink: @escaping FlutterEventSink) {
    self.sink = sink
  }

  func success(_ value: ReturnType) {
    sink(value)
  }

  func error(code: String, message: String?, details: Any?) {
    sink(FlutterError(code: code, message: message, details: details))
  }

  func endOfStream() {
    sink(FlutterEndOfEventStream)
  }

}

class StreamEventsStreamHandler: PigeonEventChannelWrapper<ButtonEvent> {
  static func register(with messenger: FlutterBinaryMessenger, 
                      instanceName: String = "",
                      streamHandler: StreamEventsStreamHandler) {
    var channelName = "dev.flutter.pigeon.button_event_stream_package.EventChannelMethods.streamEvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<ButtonEvent>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: buttonEventStreamPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
